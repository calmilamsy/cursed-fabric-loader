buildscript {
	repositories {
		mavenCentral();
	}

	dependencies {
		classpath group: 'net.sourceforge.argo', name: 'argo', version: '5.13'
	}
}

plugins {
	id 'java'
	id 'maven-publish'

	id 'idea'
	id 'eclipse'
	//id("fabric-loom") version "0.2.6-SNAPSHOT"
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.9'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

configurations {
	installed
	launchwrapper.extendsFrom installed
	implementation.extendsFrom(installed, launchwrapper)
	testCompileOnly.extendsFrom compileOnly
}

dependencies {
	//minecraft "com.mojang:minecraft:1.14.4"
	//mappings "net.fabricmc:yarn:1.14.4+build.1"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// Minecraft's JAR uses these annotations
	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

	// fabric-loader dependencies
	annotationProcessor installed ("org.ow2.asm:asm:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-analysis:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-commons:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-tree:${project.asm_version}")
	annotationProcessor installed ("org.ow2.asm:asm-util:${project.asm_version}")

	installed('net.fabricmc:sponge-mixin:0.8.2+build.23') {
		exclude module: 'launchwrapper'
		//exclude module: 'guava'
	}
	installed 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	installed 'net.fabricmc:tiny-remapper:0.3.0.70'
	installed 'net.fabricmc:access-widener:1.0.0'

	installed 'com.google.jimfs:jimfs:1.2-fabric'
	installed 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	launchwrapper ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	launchwrapper 'net.sf.jopt-simple:jopt-simple:5.0.3'

	testCompileOnly 'org.jetbrains:annotations:19.0.0'

	// Unit testing for mod metadata
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

import static argo.jdom.JsonNodeBuilders.*;
import argo.format.PrettyJsonFormatter;
import argo.jdom.JsonArrayNodeBuilder;
import argo.jdom.JsonNode;
import argo.jdom.JsonObjectNodeBuilder;
import java.util.function.Consumer;

JsonObjectNodeBuilder makeDependencyObject(Dependency dependency) {
	return anObjectBuilder()
			.withField("name", aStringBuilder(String.join(":", dependency.getGroup(), dependency.getName(), dependency.getVersion())))
			.withField("url", aStringBuilder("https://maven.fabricmc.net/"));
}

JsonObjectNodeBuilder getInstallerJSON(Configuration config, Consumer<JsonArrayNodeBuilder> extraLibs = {}) {
	JsonObjectNodeBuilder libraries = anObjectBuilder();

	JsonArrayNodeBuilder clientLibs = anArrayBuilder();
	//There aren't any client side only libraries
	libraries.withField("client", clientLibs);

	JsonArrayNodeBuilder commonLibs = anArrayBuilder();
	config.dependencies.findAll { 
		it instanceof ExternalDependency 
	}.forEach {
		commonLibs.withElement(makeDependencyObject(it))
	}
	extraLibs.accept(commonLibs)
	libraries.withField("common", commonLibs);

	JsonArrayNodeBuilder serverLibs = anArrayBuilder();
	serverLibs.withElement(anObjectBuilder()
			.withField("_comment", aStringBuilder("jimfs in fabric-server-launch requires guava on the system classloader"))
			.withField("name", aStringBuilder("com.google.guava:guava:21.0"))
			//Mojang hosts Guava: https://libraries.minecraft.net/com/google/guava/guava/21.0/guava-21.0.jar
			);
	libraries.withField("server", serverLibs);

	return anObjectBuilder().withField("version", aNumberBuilder("1")).withField("libraries", libraries);
}

task createInstallerJSON() {
	def output = file("$buildDir/generated-resources/fabric-installer.json")
	outputs.file(output)

	doLast {
		output.withWriter('utf-8') {writer ->
			new PrettyJsonFormatter().format(getInstallerJSON(configurations.installed)
				.withField("mainClass", anObjectBuilder()
					.withField("client", aStringBuilder("net.fabricmc.loader.launch.knot.KnotClient"))
					.withField("server", aStringBuilder("net.fabricmc.loader.launch.knot.KnotServer"))
				).build(), writer);
		}
	}
}

task createInstallerLWJSON() {
	def output = file("$buildDir/generated-resources/fabric-installer.launchwrapper.json")
	outputs.file(output)

	doLast {
		output.withWriter('utf-8') {writer ->
			new PrettyJsonFormatter().format(getInstallerJSON(configurations.installed) {dependencies ->
					dependencies.withElement(anObjectBuilder()
						.withField("name", aStringBuilder("net.minecraft:launchwrapper:1.12"))
						)
				}.withField("mainClass", aStringBuilder("net.minecraft.launchwrapper.Launch"))
				.withField("arguments", anObjectBuilder()
					.withField("client", anArrayBuilder()
					).withField("common", anArrayBuilder()
					).withField("server", anArrayBuilder()
					)
				).withField("launchwrapper", anObjectBuilder()
					.withField("tweakers", anObjectBuilder()
						.withField("client", anArrayBuilder()
							.withElement(aStringBuilder("net.fabricmc.loader.launch.FabricClientTweaker"))
						).withField("common", anArrayBuilder()
						).withField("server", anArrayBuilder()
							.withElement(aStringBuilder("net.fabricmc.loader.launch.FabricServerTweaker"))
						)
					)
				).build(), writer);
		}
	}
}

jar {
	from createInstallerJSON.outputs
	from createInstallerLWJSON.outputs
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}
}

task copyJson(type: Copy, dependsOn: createInstallerJSON) {
	from(createInstallerJSON.outputs) {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy, dependsOn: createInstallerLWJSON) {
	from(createInstallerLWJSON.outputs) {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

tasks.build.dependsOn copyJson
tasks.build.dependsOn copyJsonLw

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}
build.dependsOn javadocJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy jar
			}
			artifact(sourcesJar) {
				builtBy sourcesJar
			}
			artifact javadocJar
			artifact(createInstallerJSON.outputs.files.singleFile) {
				builtBy copyJson
			}
			artifact(createInstallerLWJSON.outputs.files.singleFile) {
				builtBy copyJsonLw
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty('mavenPass')) {
			maven {
				url = "http://mavenupload.modmuss50.me/"
				credentials {
					username = "buildslave"
					password = project.getProperty('mavenPass')
				}
			}
		}
	}
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

license {
	// Exclude gson since it is google's code, we just modify and bundle it
	exclude '**/JsonReader.java'
	exclude '**/JsonScope.java'
	exclude '**/JsonToken.java'
	exclude '**/MalformedJsonException.java'
	exclude '**/io/github/minecraftcursedlegacy/**'
}